syntax = "proto3";
package types;

option go_package = "github.com/canopy-network/canopy/lib";

import "proposal.proto";

message Proposers {
  repeated bytes addresses = 1;
}

enum Phase {
  UNKNOWN = 0;
  ELECTION = 1;
  ELECTION_VOTE = 2;
  PROPOSE = 3;
  PROPOSE_VOTE = 4;
  PRECOMMIT = 5;
  PRECOMMIT_VOTE = 6;
  COMMIT = 7;
  COMMIT_PROCESS = 8;
  ROUND_INTERRUPT = 9;
  PACEMAKER = 10;
}

message QuorumCertificate {
  View header = 1; // replica vote view
  CertificateResult results = 2; // used for PROPOSE
  bytes results_hash = 3; // used after PROPOSE
  bytes block = 4; // used for PROPOSE
  bytes block_hash = 5; // used after PROPOSE
  bytes proposer_key = 6; // only EV and PROPOSE
  AggregateSignature signature = 7; // aggregate signature from the current proposer message
}

// A View is a specific point in the consensus process; think of it like a snapshot of the consensus process at a
// certain point in time.
// A View comprises of:
//
// 1) Network ID and Committee ID: These identifiers uniquely define the BFT instance,
// distinguishing different networks and the committees within them
//
// 2) Height and Canopy Height: For each BFT instance, the height increases with every new block produced,
// and the canopy height when a canopy block is produced.
//
// 3) Round: Each height comprises of 1 or more rounds. A round increments when no block is produced but resets
// to zero at a new height.
//
// 3) Phase: Each round consists of a fixed number of phases. Phases progress within the round and either end
// with the successful production of a block or quit prematurely due to an error.
message View {
  // the unique identifier of the blockchain network
  uint64 network_id = 1;
  // the unique identifier of the committee within the blockchain network
  uint64 committee_id = 2;
  // the height or number of committed blocks in the blockchain
  uint64 height = 3;
  // the Canopy blockchain height also the height that the committee validator set may be verified
  uint64 canopy_height = 4;
  // each height consists of one or more `rounds` which is a step within the consensus protocol where
  // a new Proposer is selected to lead the validators to agree on the next block if they fail, the
  // round is incremented, more time is granted for consensus timeouts, and the cycle starts over
  uint64 round = 5;
  // represents the smallest unit in the consensus process. Each round consists of multiple phases, and these phases are
  // executed sequentially to achieve consensus on the next block.
  // ELECTION->ELECTION-VOTE->PROPOSE->PROPOSE-VOTE->PRECOMMIT->PRECOMMIT-VOTE->COMMIT->COMMIT-PROCESS
  Phase phase = 6;
}

// Verifiable Delay Function
message VDF {
  bytes proof = 1; // proof of function completion given a specific seed
  uint64 iterations = 2; // number of iterations (proxy for time)
}

message AggregateSignature {
  bytes signature = 1;
  bytes bitmap = 2;
}
