// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: gov.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockSize                                 int32  `protobuf:"varint,1,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
	ValidatorMinimumStake                     string `protobuf:"bytes,2,opt,name=validator_minimum_stake,json=validatorMinimumStake,proto3" json:"validator_minimum_stake,omitempty"`
	ValidatorUnstakingBlocks                  int32  `protobuf:"varint,3,opt,name=validator_unstaking_blocks,json=validatorUnstakingBlocks,proto3" json:"validator_unstaking_blocks,omitempty"`
	ValidatorMinimumPauseBlocks               int32  `protobuf:"varint,4,opt,name=validator_minimum_pause_blocks,json=validatorMinimumPauseBlocks,proto3" json:"validator_minimum_pause_blocks,omitempty"`
	ValidatorMaxPauseBlocks                   int32  `protobuf:"varint,5,opt,name=validator_max_pause_blocks,json=validatorMaxPauseBlocks,proto3" json:"validator_max_pause_blocks,omitempty"`
	ValidatorMaximumMissedBlocks              int32  `protobuf:"varint,6,opt,name=validator_maximum_missed_blocks,json=validatorMaximumMissedBlocks,proto3" json:"validator_maximum_missed_blocks,omitempty"`
	ValidatorMaxEvidenceAgeInBlocks           int32  `protobuf:"varint,7,opt,name=validator_max_evidence_age_in_blocks,json=validatorMaxEvidenceAgeInBlocks,proto3" json:"validator_max_evidence_age_in_blocks,omitempty"`
	ProposerPercentageOfFees                  int32  `protobuf:"varint,8,opt,name=proposer_percentage_of_fees,json=proposerPercentageOfFees,proto3" json:"proposer_percentage_of_fees,omitempty"`
	MissedBlocksBurnPercentage                int32  `protobuf:"varint,9,opt,name=missed_blocks_burn_percentage,json=missedBlocksBurnPercentage,proto3" json:"missed_blocks_burn_percentage,omitempty"`
	DoubleSignBurnPercentage                  int32  `protobuf:"varint,10,opt,name=double_sign_burn_percentage,json=doubleSignBurnPercentage,proto3" json:"double_sign_burn_percentage,omitempty"`
	MessageDoubleSignFee                      string `protobuf:"bytes,11,opt,name=message_double_sign_fee,json=messageDoubleSignFee,proto3" json:"message_double_sign_fee,omitempty"`
	MessageSendFee                            string `protobuf:"bytes,12,opt,name=message_send_fee,json=messageSendFee,proto3" json:"message_send_fee,omitempty"`
	MessageStakeValidatorFee                  string `protobuf:"bytes,13,opt,name=message_stake_validator_fee,json=messageStakeValidatorFee,proto3" json:"message_stake_validator_fee,omitempty"`
	MessageUnstakeValidatorFee                string `protobuf:"bytes,14,opt,name=message_unstake_validator_fee,json=messageUnstakeValidatorFee,proto3" json:"message_unstake_validator_fee,omitempty"`
	MessagePauseValidatorFee                  string `protobuf:"bytes,15,opt,name=message_pause_validator_fee,json=messagePauseValidatorFee,proto3" json:"message_pause_validator_fee,omitempty"`
	MessageUnpauseValidatorFee                string `protobuf:"bytes,16,opt,name=message_unpause_validator_fee,json=messageUnpauseValidatorFee,proto3" json:"message_unpause_validator_fee,omitempty"`
	MessageChangeParameterFee                 string `protobuf:"bytes,17,opt,name=message_change_parameter_fee,json=messageChangeParameterFee,proto3" json:"message_change_parameter_fee,omitempty"`
	AclOwner                                  string `protobuf:"bytes,18,opt,name=acl_owner,json=aclOwner,proto3" json:"acl_owner,omitempty"`
	ParamBlockSize                            string `protobuf:"bytes,19,opt,name=param_block_size,json=paramBlockSize,proto3" json:"param_block_size,omitempty"`
	ParamValidatorMinimumStakeOwner           string `protobuf:"bytes,20,opt,name=param_validator_minimum_stake_owner,json=paramValidatorMinimumStakeOwner,proto3" json:"param_validator_minimum_stake_owner,omitempty"`
	ParamValidatorUnstakingBlocksOwner        string `protobuf:"bytes,21,opt,name=param_validator_unstaking_blocks_owner,json=paramValidatorUnstakingBlocksOwner,proto3" json:"param_validator_unstaking_blocks_owner,omitempty"`
	ParamValidatorMinimumPauseBlocksOwner     string `protobuf:"bytes,22,opt,name=param_validator_minimum_pause_blocks_owner,json=paramValidatorMinimumPauseBlocksOwner,proto3" json:"param_validator_minimum_pause_blocks_owner,omitempty"`
	ParamValidatorMaxPauseBlocksOwner         string `protobuf:"bytes,23,opt,name=param_validator_max_pause_blocks_owner,json=paramValidatorMaxPauseBlocksOwner,proto3" json:"param_validator_max_pause_blocks_owner,omitempty"`
	ParamValidatorMaximumMissedBlocksOwner    string `protobuf:"bytes,24,opt,name=param_validator_maximum_missed_blocks_owner,json=paramValidatorMaximumMissedBlocksOwner,proto3" json:"param_validator_maximum_missed_blocks_owner,omitempty"`
	ParamValidatorMaxEvidenceAgeInBlocksOwner string `protobuf:"bytes,25,opt,name=param_validator_max_evidence_age_in_blocks_owner,json=paramValidatorMaxEvidenceAgeInBlocksOwner,proto3" json:"param_validator_max_evidence_age_in_blocks_owner,omitempty"`
	ParamProposerPercentageOfFeesOwner        string `protobuf:"bytes,26,opt,name=param_proposer_percentage_of_fees_owner,json=paramProposerPercentageOfFeesOwner,proto3" json:"param_proposer_percentage_of_fees_owner,omitempty"`
	ParamMissedBlocksBurnPercentageOwner      string `protobuf:"bytes,27,opt,name=param_missed_blocks_burn_percentage_owner,json=paramMissedBlocksBurnPercentageOwner,proto3" json:"param_missed_blocks_burn_percentage_owner,omitempty"`
	ParamDoubleSignBurnPercentageOwner        string `protobuf:"bytes,28,opt,name=param_double_sign_burn_percentage_owner,json=paramDoubleSignBurnPercentageOwner,proto3" json:"param_double_sign_burn_percentage_owner,omitempty"`
	ParamMessageDoubleSignFeeOwner            string `protobuf:"bytes,29,opt,name=param_message_double_sign_fee_owner,json=paramMessageDoubleSignFeeOwner,proto3" json:"param_message_double_sign_fee_owner,omitempty"`
	ParamMessageSendFeeOwner                  string `protobuf:"bytes,30,opt,name=param_message_send_fee_owner,json=paramMessageSendFeeOwner,proto3" json:"param_message_send_fee_owner,omitempty"`
	ParamMessageStakeValidatorFeeOwner        string `protobuf:"bytes,31,opt,name=param_message_stake_validator_fee_owner,json=paramMessageStakeValidatorFeeOwner,proto3" json:"param_message_stake_validator_fee_owner,omitempty"`
	ParamMessageUnstakeValidatorFeeOwner      string `protobuf:"bytes,32,opt,name=param_message_unstake_validator_fee_owner,json=paramMessageUnstakeValidatorFeeOwner,proto3" json:"param_message_unstake_validator_fee_owner,omitempty"`
	ParamMessagePauseValidatorFeeOwner        string `protobuf:"bytes,33,opt,name=param_message_pause_validator_fee_owner,json=paramMessagePauseValidatorFeeOwner,proto3" json:"param_message_pause_validator_fee_owner,omitempty"`
	ParamMessageUnpauseValidatorFeeOwner      string `protobuf:"bytes,34,opt,name=param_message_unpause_validator_fee_owner,json=paramMessageUnpauseValidatorFeeOwner,proto3" json:"param_message_unpause_validator_fee_owner,omitempty"`
	ParamMessageChangeParameterFeeOwner       string `protobuf:"bytes,35,opt,name=param_message_change_parameter_fee_owner,json=paramMessageChangeParameterFeeOwner,proto3" json:"param_message_change_parameter_fee_owner,omitempty"`
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gov_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

func (x *Params) ProtoReflect() protoreflect.Message {
	mi := &file_gov_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_gov_proto_rawDescGZIP(), []int{0}
}

func (x *Params) GetBlockSize() int32 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *Params) GetValidatorMinimumStake() string {
	if x != nil {
		return x.ValidatorMinimumStake
	}
	return ""
}

func (x *Params) GetValidatorUnstakingBlocks() int32 {
	if x != nil {
		return x.ValidatorUnstakingBlocks
	}
	return 0
}

func (x *Params) GetValidatorMinimumPauseBlocks() int32 {
	if x != nil {
		return x.ValidatorMinimumPauseBlocks
	}
	return 0
}

func (x *Params) GetValidatorMaxPauseBlocks() int32 {
	if x != nil {
		return x.ValidatorMaxPauseBlocks
	}
	return 0
}

func (x *Params) GetValidatorMaximumMissedBlocks() int32 {
	if x != nil {
		return x.ValidatorMaximumMissedBlocks
	}
	return 0
}

func (x *Params) GetValidatorMaxEvidenceAgeInBlocks() int32 {
	if x != nil {
		return x.ValidatorMaxEvidenceAgeInBlocks
	}
	return 0
}

func (x *Params) GetProposerPercentageOfFees() int32 {
	if x != nil {
		return x.ProposerPercentageOfFees
	}
	return 0
}

func (x *Params) GetMissedBlocksBurnPercentage() int32 {
	if x != nil {
		return x.MissedBlocksBurnPercentage
	}
	return 0
}

func (x *Params) GetDoubleSignBurnPercentage() int32 {
	if x != nil {
		return x.DoubleSignBurnPercentage
	}
	return 0
}

func (x *Params) GetMessageDoubleSignFee() string {
	if x != nil {
		return x.MessageDoubleSignFee
	}
	return ""
}

func (x *Params) GetMessageSendFee() string {
	if x != nil {
		return x.MessageSendFee
	}
	return ""
}

func (x *Params) GetMessageStakeValidatorFee() string {
	if x != nil {
		return x.MessageStakeValidatorFee
	}
	return ""
}

func (x *Params) GetMessageUnstakeValidatorFee() string {
	if x != nil {
		return x.MessageUnstakeValidatorFee
	}
	return ""
}

func (x *Params) GetMessagePauseValidatorFee() string {
	if x != nil {
		return x.MessagePauseValidatorFee
	}
	return ""
}

func (x *Params) GetMessageUnpauseValidatorFee() string {
	if x != nil {
		return x.MessageUnpauseValidatorFee
	}
	return ""
}

func (x *Params) GetMessageChangeParameterFee() string {
	if x != nil {
		return x.MessageChangeParameterFee
	}
	return ""
}

func (x *Params) GetAclOwner() string {
	if x != nil {
		return x.AclOwner
	}
	return ""
}

func (x *Params) GetParamBlockSize() string {
	if x != nil {
		return x.ParamBlockSize
	}
	return ""
}

func (x *Params) GetParamValidatorMinimumStakeOwner() string {
	if x != nil {
		return x.ParamValidatorMinimumStakeOwner
	}
	return ""
}

func (x *Params) GetParamValidatorUnstakingBlocksOwner() string {
	if x != nil {
		return x.ParamValidatorUnstakingBlocksOwner
	}
	return ""
}

func (x *Params) GetParamValidatorMinimumPauseBlocksOwner() string {
	if x != nil {
		return x.ParamValidatorMinimumPauseBlocksOwner
	}
	return ""
}

func (x *Params) GetParamValidatorMaxPauseBlocksOwner() string {
	if x != nil {
		return x.ParamValidatorMaxPauseBlocksOwner
	}
	return ""
}

func (x *Params) GetParamValidatorMaximumMissedBlocksOwner() string {
	if x != nil {
		return x.ParamValidatorMaximumMissedBlocksOwner
	}
	return ""
}

func (x *Params) GetParamValidatorMaxEvidenceAgeInBlocksOwner() string {
	if x != nil {
		return x.ParamValidatorMaxEvidenceAgeInBlocksOwner
	}
	return ""
}

func (x *Params) GetParamProposerPercentageOfFeesOwner() string {
	if x != nil {
		return x.ParamProposerPercentageOfFeesOwner
	}
	return ""
}

func (x *Params) GetParamMissedBlocksBurnPercentageOwner() string {
	if x != nil {
		return x.ParamMissedBlocksBurnPercentageOwner
	}
	return ""
}

func (x *Params) GetParamDoubleSignBurnPercentageOwner() string {
	if x != nil {
		return x.ParamDoubleSignBurnPercentageOwner
	}
	return ""
}

func (x *Params) GetParamMessageDoubleSignFeeOwner() string {
	if x != nil {
		return x.ParamMessageDoubleSignFeeOwner
	}
	return ""
}

func (x *Params) GetParamMessageSendFeeOwner() string {
	if x != nil {
		return x.ParamMessageSendFeeOwner
	}
	return ""
}

func (x *Params) GetParamMessageStakeValidatorFeeOwner() string {
	if x != nil {
		return x.ParamMessageStakeValidatorFeeOwner
	}
	return ""
}

func (x *Params) GetParamMessageUnstakeValidatorFeeOwner() string {
	if x != nil {
		return x.ParamMessageUnstakeValidatorFeeOwner
	}
	return ""
}

func (x *Params) GetParamMessagePauseValidatorFeeOwner() string {
	if x != nil {
		return x.ParamMessagePauseValidatorFeeOwner
	}
	return ""
}

func (x *Params) GetParamMessageUnpauseValidatorFeeOwner() string {
	if x != nil {
		return x.ParamMessageUnpauseValidatorFeeOwner
	}
	return ""
}

func (x *Params) GetParamMessageChangeParameterFeeOwner() string {
	if x != nil {
		return x.ParamMessageChangeParameterFeeOwner
	}
	return ""
}

var File_gov_proto protoreflect.FileDescriptor

var file_gov_proto_rawDesc = []byte{
	0x0a, 0x09, 0x67, 0x6f, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x22, 0xb8, 0x13, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x36, 0x0a, 0x17,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x78, 0x50, 0x61, 0x75, 0x73, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x45, 0x0a, 0x1f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4d,
	0x69, 0x73, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x4d, 0x0a, 0x24, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x78, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x41,
	0x67, 0x65, 0x49, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x18, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x4f, 0x66, 0x46, 0x65, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x6d, 0x69, 0x73,
	0x73, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x62, 0x75, 0x72, 0x6e, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1a, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x75,
	0x72, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x1b,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x62, 0x75, 0x72, 0x6e,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x18, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x42, 0x75, 0x72,
	0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x46,
	0x65, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x12, 0x3d, 0x0a, 0x1b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x18, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x12, 0x3d,
	0x0a, 0x1b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x12, 0x41, 0x0a,
	0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x70,
	0x61, 0x75, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x65,
	0x12, 0x3f, 0x0a, 0x1c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x46, 0x65,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x6c, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x28,
	0x0a, 0x10, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4c, 0x0a, 0x23, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x26, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x22, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x2a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x25,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x75, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x26, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x75,
	0x73, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x78, 0x50, 0x61, 0x75, 0x73, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x2b, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x26, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x63, 0x0a, 0x30, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x29, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d,
	0x61, 0x78, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x49, 0x6e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x27, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x22, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x46, 0x65, 0x65, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x57, 0x0a, 0x29, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x62, 0x75, 0x72, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x24, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x75, 0x72, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x27, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x62, 0x75,
	0x72, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x22, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x42, 0x75, 0x72, 0x6e, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x4b, 0x0a,
	0x23, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x1c, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x18, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65,
	0x6e, 0x64, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x27, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x5f,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x22, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x57, 0x0a, 0x29, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x24, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x27, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x22, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x57, 0x0a,
	0x29, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75,
	0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x24, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65,
	0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x28, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x23, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x46, 0x65, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x22, 0x5a,
	0x20, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x69, 0x6e, 0x63,
	0x68, 0x75, 0x63, 0x6f, 0x2f, 0x67, 0x69, 0x6e, 0x63, 0x68, 0x75, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gov_proto_rawDescOnce sync.Once
	file_gov_proto_rawDescData = file_gov_proto_rawDesc
)

func file_gov_proto_rawDescGZIP() []byte {
	file_gov_proto_rawDescOnce.Do(func() {
		file_gov_proto_rawDescData = protoimpl.X.CompressGZIP(file_gov_proto_rawDescData)
	})
	return file_gov_proto_rawDescData
}

var file_gov_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_gov_proto_goTypes = []interface{}{
	(*Params)(nil), // 0: types.Params
}
var file_gov_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_gov_proto_init() }
func file_gov_proto_init() {
	if File_gov_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gov_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gov_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gov_proto_goTypes,
		DependencyIndexes: file_gov_proto_depIdxs,
		MessageInfos:      file_gov_proto_msgTypes,
	}.Build()
	File_gov_proto = out.File
	file_gov_proto_rawDesc = nil
	file_gov_proto_goTypes = nil
	file_gov_proto_depIdxs = nil
}
