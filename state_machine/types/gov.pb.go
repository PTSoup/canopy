// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: gov.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Consensus  *ConsensusParams  `protobuf:"bytes,1,opt,name=Consensus,proto3" json:"Consensus,omitempty"`
	Validator  *ValidatorParams  `protobuf:"bytes,2,opt,name=Validator,proto3" json:"Validator,omitempty"`
	Fee        *FeeParams        `protobuf:"bytes,3,opt,name=Fee,proto3" json:"Fee,omitempty"`
	Governance *GovernanceParams `protobuf:"bytes,4,opt,name=Governance,proto3" json:"Governance,omitempty"`
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gov_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

func (x *Params) ProtoReflect() protoreflect.Message {
	mi := &file_gov_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_gov_proto_rawDescGZIP(), []int{0}
}

func (x *Params) GetConsensus() *ConsensusParams {
	if x != nil {
		return x.Consensus
	}
	return nil
}

func (x *Params) GetValidator() *ValidatorParams {
	if x != nil {
		return x.Validator
	}
	return nil
}

func (x *Params) GetFee() *FeeParams {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *Params) GetGovernance() *GovernanceParams {
	if x != nil {
		return x.Governance
	}
	return nil
}

type ProtocolVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height  uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Version uint64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ProtocolVersion) Reset() {
	*x = ProtocolVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gov_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolVersion) ProtoMessage() {}

func (x *ProtocolVersion) ProtoReflect() protoreflect.Message {
	mi := &file_gov_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolVersion.ProtoReflect.Descriptor instead.
func (*ProtocolVersion) Descriptor() ([]byte, []int) {
	return file_gov_proto_rawDescGZIP(), []int{1}
}

func (x *ProtocolVersion) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ProtocolVersion) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type ConsensusParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockSize       *Uint64Param `protobuf:"bytes,1,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
	ProtocolVersion *StringParam `protobuf:"bytes,2,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
}

func (x *ConsensusParams) Reset() {
	*x = ConsensusParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gov_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusParams) ProtoMessage() {}

func (x *ConsensusParams) ProtoReflect() protoreflect.Message {
	mi := &file_gov_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusParams.ProtoReflect.Descriptor instead.
func (*ConsensusParams) Descriptor() ([]byte, []int) {
	return file_gov_proto_rawDescGZIP(), []int{2}
}

func (x *ConsensusParams) GetBlockSize() *Uint64Param {
	if x != nil {
		return x.BlockSize
	}
	return nil
}

func (x *ConsensusParams) GetProtocolVersion() *StringParam {
	if x != nil {
		return x.ProtocolVersion
	}
	return nil
}

type ValidatorParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidatorMinStake                   *StringParam `protobuf:"bytes,1,opt,name=validator_min_stake,json=validatorMinStake,proto3" json:"validator_min_stake,omitempty"`
	ValidatorMaxCount                   *Uint64Param `protobuf:"bytes,2,opt,name=validator_max_count,json=validatorMaxCount,proto3" json:"validator_max_count,omitempty"`
	ValidatorUnstakingBlocks            *Uint64Param `protobuf:"bytes,3,opt,name=validator_unstaking_blocks,json=validatorUnstakingBlocks,proto3" json:"validator_unstaking_blocks,omitempty"`
	ValidatorMinPauseBlocks             *Uint64Param `protobuf:"bytes,4,opt,name=validator_min_pause_blocks,json=validatorMinPauseBlocks,proto3" json:"validator_min_pause_blocks,omitempty"`
	ValidatorMaxPauseBlocks             *Uint64Param `protobuf:"bytes,5,opt,name=validator_max_pause_blocks,json=validatorMaxPauseBlocks,proto3" json:"validator_max_pause_blocks,omitempty"`
	ValidatorMaxEvidenceAgeInBlocks     *Uint64Param `protobuf:"bytes,6,opt,name=validator_max_evidence_age_in_blocks,json=validatorMaxEvidenceAgeInBlocks,proto3" json:"validator_max_evidence_age_in_blocks,omitempty"`
	ValidatorDoubleSignSlashPercentage  *Uint64Param `protobuf:"bytes,7,opt,name=validator_double_sign_slash_percentage,json=validatorDoubleSignSlashPercentage,proto3" json:"validator_double_sign_slash_percentage,omitempty"`
	ValidatorFaultySignSlashPercentage  *Uint64Param `protobuf:"bytes,8,opt,name=validator_faulty_sign_slash_percentage,json=validatorFaultySignSlashPercentage,proto3" json:"validator_faulty_sign_slash_percentage,omitempty"`
	ValidatorBadProposalSlashPercentage *Uint64Param `protobuf:"bytes,9,opt,name=validator_bad_proposal_slash_percentage,json=validatorBadProposalSlashPercentage,proto3" json:"validator_bad_proposal_slash_percentage,omitempty"`
	ValidatorNonSignSlashPercentage     *Uint64Param `protobuf:"bytes,10,opt,name=validator_non_sign_slash_percentage,json=validatorNonSignSlashPercentage,proto3" json:"validator_non_sign_slash_percentage,omitempty"`
	ValidatorMaxNonSign                 *Uint64Param `protobuf:"bytes,11,opt,name=validator_max_non_sign,json=validatorMaxNonSign,proto3" json:"validator_max_non_sign,omitempty"`
	ValidatorNonSignWindow              *Uint64Param `protobuf:"bytes,12,opt,name=validator_non_sign_window,json=validatorNonSignWindow,proto3" json:"validator_non_sign_window,omitempty"`
	ValidatorDoubleSignReporterReward   *StringParam `protobuf:"bytes,13,opt,name=validator_double_sign_reporter_reward,json=validatorDoubleSignReporterReward,proto3" json:"validator_double_sign_reporter_reward,omitempty"` // TODO likely remove
	ValidatorProposerPercentageOfFees   *Uint64Param `protobuf:"bytes,14,opt,name=validator_proposer_percentage_of_fees,json=validatorProposerPercentageOfFees,proto3" json:"validator_proposer_percentage_of_fees,omitempty"`
	ValidatorProposerBlockReward        *StringParam `protobuf:"bytes,15,opt,name=validator_proposer_block_reward,json=validatorProposerBlockReward,proto3" json:"validator_proposer_block_reward,omitempty"`
}

func (x *ValidatorParams) Reset() {
	*x = ValidatorParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gov_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorParams) ProtoMessage() {}

func (x *ValidatorParams) ProtoReflect() protoreflect.Message {
	mi := &file_gov_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorParams.ProtoReflect.Descriptor instead.
func (*ValidatorParams) Descriptor() ([]byte, []int) {
	return file_gov_proto_rawDescGZIP(), []int{3}
}

func (x *ValidatorParams) GetValidatorMinStake() *StringParam {
	if x != nil {
		return x.ValidatorMinStake
	}
	return nil
}

func (x *ValidatorParams) GetValidatorMaxCount() *Uint64Param {
	if x != nil {
		return x.ValidatorMaxCount
	}
	return nil
}

func (x *ValidatorParams) GetValidatorUnstakingBlocks() *Uint64Param {
	if x != nil {
		return x.ValidatorUnstakingBlocks
	}
	return nil
}

func (x *ValidatorParams) GetValidatorMinPauseBlocks() *Uint64Param {
	if x != nil {
		return x.ValidatorMinPauseBlocks
	}
	return nil
}

func (x *ValidatorParams) GetValidatorMaxPauseBlocks() *Uint64Param {
	if x != nil {
		return x.ValidatorMaxPauseBlocks
	}
	return nil
}

func (x *ValidatorParams) GetValidatorMaxEvidenceAgeInBlocks() *Uint64Param {
	if x != nil {
		return x.ValidatorMaxEvidenceAgeInBlocks
	}
	return nil
}

func (x *ValidatorParams) GetValidatorDoubleSignSlashPercentage() *Uint64Param {
	if x != nil {
		return x.ValidatorDoubleSignSlashPercentage
	}
	return nil
}

func (x *ValidatorParams) GetValidatorFaultySignSlashPercentage() *Uint64Param {
	if x != nil {
		return x.ValidatorFaultySignSlashPercentage
	}
	return nil
}

func (x *ValidatorParams) GetValidatorBadProposalSlashPercentage() *Uint64Param {
	if x != nil {
		return x.ValidatorBadProposalSlashPercentage
	}
	return nil
}

func (x *ValidatorParams) GetValidatorNonSignSlashPercentage() *Uint64Param {
	if x != nil {
		return x.ValidatorNonSignSlashPercentage
	}
	return nil
}

func (x *ValidatorParams) GetValidatorMaxNonSign() *Uint64Param {
	if x != nil {
		return x.ValidatorMaxNonSign
	}
	return nil
}

func (x *ValidatorParams) GetValidatorNonSignWindow() *Uint64Param {
	if x != nil {
		return x.ValidatorNonSignWindow
	}
	return nil
}

func (x *ValidatorParams) GetValidatorDoubleSignReporterReward() *StringParam {
	if x != nil {
		return x.ValidatorDoubleSignReporterReward
	}
	return nil
}

func (x *ValidatorParams) GetValidatorProposerPercentageOfFees() *Uint64Param {
	if x != nil {
		return x.ValidatorProposerPercentageOfFees
	}
	return nil
}

func (x *ValidatorParams) GetValidatorProposerBlockReward() *StringParam {
	if x != nil {
		return x.ValidatorProposerBlockReward
	}
	return nil
}

type FeeParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageSendFee            *StringParam `protobuf:"bytes,1,opt,name=message_send_fee,json=messageSendFee,proto3" json:"message_send_fee,omitempty"`
	MessageStakeFee           *StringParam `protobuf:"bytes,2,opt,name=message_stake_fee,json=messageStakeFee,proto3" json:"message_stake_fee,omitempty"`
	MessageEditStakeFee       *StringParam `protobuf:"bytes,3,opt,name=message_edit_stake_fee,json=messageEditStakeFee,proto3" json:"message_edit_stake_fee,omitempty"`
	MessageUnstakeFee         *StringParam `protobuf:"bytes,4,opt,name=message_unstake_fee,json=messageUnstakeFee,proto3" json:"message_unstake_fee,omitempty"`
	MessagePauseFee           *StringParam `protobuf:"bytes,5,opt,name=message_pause_fee,json=messagePauseFee,proto3" json:"message_pause_fee,omitempty"`
	MessageUnpauseFee         *StringParam `protobuf:"bytes,6,opt,name=message_unpause_fee,json=messageUnpauseFee,proto3" json:"message_unpause_fee,omitempty"`
	MessageChangeParameterFee *StringParam `protobuf:"bytes,7,opt,name=message_change_parameter_fee,json=messageChangeParameterFee,proto3" json:"message_change_parameter_fee,omitempty"`
	MessageDoubleSignFee      *StringParam `protobuf:"bytes,8,opt,name=message_double_sign_fee,json=messageDoubleSignFee,proto3" json:"message_double_sign_fee,omitempty"`
}

func (x *FeeParams) Reset() {
	*x = FeeParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gov_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeParams) ProtoMessage() {}

func (x *FeeParams) ProtoReflect() protoreflect.Message {
	mi := &file_gov_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeParams.ProtoReflect.Descriptor instead.
func (*FeeParams) Descriptor() ([]byte, []int) {
	return file_gov_proto_rawDescGZIP(), []int{4}
}

func (x *FeeParams) GetMessageSendFee() *StringParam {
	if x != nil {
		return x.MessageSendFee
	}
	return nil
}

func (x *FeeParams) GetMessageStakeFee() *StringParam {
	if x != nil {
		return x.MessageStakeFee
	}
	return nil
}

func (x *FeeParams) GetMessageEditStakeFee() *StringParam {
	if x != nil {
		return x.MessageEditStakeFee
	}
	return nil
}

func (x *FeeParams) GetMessageUnstakeFee() *StringParam {
	if x != nil {
		return x.MessageUnstakeFee
	}
	return nil
}

func (x *FeeParams) GetMessagePauseFee() *StringParam {
	if x != nil {
		return x.MessagePauseFee
	}
	return nil
}

func (x *FeeParams) GetMessageUnpauseFee() *StringParam {
	if x != nil {
		return x.MessageUnpauseFee
	}
	return nil
}

func (x *FeeParams) GetMessageChangeParameterFee() *StringParam {
	if x != nil {
		return x.MessageChangeParameterFee
	}
	return nil
}

func (x *FeeParams) GetMessageDoubleSignFee() *StringParam {
	if x != nil {
		return x.MessageDoubleSignFee
	}
	return nil
}

type GovernanceParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AclOwner string `protobuf:"bytes,1,opt,name=acl_owner,json=aclOwner,proto3" json:"acl_owner,omitempty"`
}

func (x *GovernanceParams) Reset() {
	*x = GovernanceParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gov_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GovernanceParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GovernanceParams) ProtoMessage() {}

func (x *GovernanceParams) ProtoReflect() protoreflect.Message {
	mi := &file_gov_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GovernanceParams.ProtoReflect.Descriptor instead.
func (*GovernanceParams) Descriptor() ([]byte, []int) {
	return file_gov_proto_rawDescGZIP(), []int{5}
}

func (x *GovernanceParams) GetAclOwner() string {
	if x != nil {
		return x.AclOwner
	}
	return ""
}

type StringParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *StringParam) Reset() {
	*x = StringParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gov_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringParam) ProtoMessage() {}

func (x *StringParam) ProtoReflect() protoreflect.Message {
	mi := &file_gov_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringParam.ProtoReflect.Descriptor instead.
func (*StringParam) Descriptor() ([]byte, []int) {
	return file_gov_proto_rawDescGZIP(), []int{6}
}

func (x *StringParam) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *StringParam) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

type Uint64Param struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *Uint64Param) Reset() {
	*x = Uint64Param{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gov_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uint64Param) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint64Param) ProtoMessage() {}

func (x *Uint64Param) ProtoReflect() protoreflect.Message {
	mi := &file_gov_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint64Param.ProtoReflect.Descriptor instead.
func (*Uint64Param) Descriptor() ([]byte, []int) {
	return file_gov_proto_rawDescGZIP(), []int{7}
}

func (x *Uint64Param) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Uint64Param) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

var File_gov_proto protoreflect.FileDescriptor

var file_gov_proto_rawDesc = []byte{
	0x0a, 0x09, 0x67, 0x6f, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x22, 0xd1, 0x01, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x34, 0x0a,
	0x09, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x09,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x03, 0x46, 0x65, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46,
	0x65, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x03, 0x46, 0x65, 0x65, 0x12, 0x37, 0x0a,
	0x0a, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0a, 0x47, 0x6f, 0x76, 0x65,
	0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x43, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x83, 0x01, 0x0a, 0x0f,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x31, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x3d, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xcb, 0x0a, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x42, 0x0a, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x4d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x42, 0x0a, 0x13, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x50, 0x0a,
	0x1a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x18, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12,
	0x4f, 0x0a, 0x1a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x69, 0x6e,
	0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x4d, 0x69, 0x6e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x12, 0x4f, 0x0a, 0x1a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x4d, 0x61, 0x78, 0x50, 0x61, 0x75, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x12, 0x61, 0x0a, 0x24, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x52, 0x1f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x61,
	0x78, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x67, 0x65, 0x49, 0x6e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x66, 0x0a, 0x26, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x6c,
	0x61, 0x73, 0x68, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x22, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x53, 0x6c, 0x61,
	0x73, 0x68, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x66, 0x0a, 0x26,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x79,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x52, 0x22, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x79, 0x53, 0x69, 0x67, 0x6e, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x68, 0x0a, 0x27, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x62, 0x61, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x73,
	0x6c, 0x61, 0x73, 0x68, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x23, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x42, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53,
	0x6c, 0x61, 0x73, 0x68, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x60,
	0x0a, 0x23, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52,
	0x1f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x6e, 0x53, 0x69, 0x67,
	0x6e, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x47, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x52, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4d,
	0x61, 0x78, 0x4e, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x4d, 0x0a, 0x19, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x52, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x6e, 0x53, 0x69,
	0x67, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x64, 0x0a, 0x25, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x21, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x64,
	0x0a, 0x25, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f,
	0x6f, 0x66, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x52, 0x21, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x66,
	0x46, 0x65, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x1f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x52, 0x1c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22,
	0xba, 0x04, 0x0a, 0x09, 0x46, 0x65, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3c, 0x0a,
	0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x12, 0x3e, 0x0a, 0x11, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x46, 0x65, 0x65, 0x12, 0x47, 0x0a, 0x16, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52,
	0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x46, 0x65, 0x65, 0x12, 0x42, 0x0a, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x75, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x46, 0x65, 0x65, 0x12, 0x3e, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x46, 0x65, 0x65, 0x12, 0x42, 0x0a, 0x13, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x55, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x46, 0x65, 0x65, 0x12, 0x53, 0x0a, 0x1c,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x46, 0x65,
	0x65, 0x12, 0x49, 0x0a, 0x17, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x14, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x46, 0x65, 0x65, 0x22, 0x2f, 0x0a, 0x10,
	0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x6c, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x39, 0x0a,
	0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x39, 0x0a, 0x0b, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x67, 0x69, 0x6e, 0x63, 0x68, 0x75, 0x63, 0x6f, 0x2f, 0x67, 0x69, 0x6e, 0x63, 0x68,
	0x75, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gov_proto_rawDescOnce sync.Once
	file_gov_proto_rawDescData = file_gov_proto_rawDesc
)

func file_gov_proto_rawDescGZIP() []byte {
	file_gov_proto_rawDescOnce.Do(func() {
		file_gov_proto_rawDescData = protoimpl.X.CompressGZIP(file_gov_proto_rawDescData)
	})
	return file_gov_proto_rawDescData
}

var file_gov_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_gov_proto_goTypes = []interface{}{
	(*Params)(nil),           // 0: types.Params
	(*ProtocolVersion)(nil),  // 1: types.ProtocolVersion
	(*ConsensusParams)(nil),  // 2: types.ConsensusParams
	(*ValidatorParams)(nil),  // 3: types.ValidatorParams
	(*FeeParams)(nil),        // 4: types.FeeParams
	(*GovernanceParams)(nil), // 5: types.GovernanceParams
	(*StringParam)(nil),      // 6: types.StringParam
	(*Uint64Param)(nil),      // 7: types.Uint64Param
}
var file_gov_proto_depIdxs = []int32{
	2,  // 0: types.Params.Consensus:type_name -> types.ConsensusParams
	3,  // 1: types.Params.Validator:type_name -> types.ValidatorParams
	4,  // 2: types.Params.Fee:type_name -> types.FeeParams
	5,  // 3: types.Params.Governance:type_name -> types.GovernanceParams
	7,  // 4: types.ConsensusParams.block_size:type_name -> types.Uint64Param
	6,  // 5: types.ConsensusParams.protocol_version:type_name -> types.StringParam
	6,  // 6: types.ValidatorParams.validator_min_stake:type_name -> types.StringParam
	7,  // 7: types.ValidatorParams.validator_max_count:type_name -> types.Uint64Param
	7,  // 8: types.ValidatorParams.validator_unstaking_blocks:type_name -> types.Uint64Param
	7,  // 9: types.ValidatorParams.validator_min_pause_blocks:type_name -> types.Uint64Param
	7,  // 10: types.ValidatorParams.validator_max_pause_blocks:type_name -> types.Uint64Param
	7,  // 11: types.ValidatorParams.validator_max_evidence_age_in_blocks:type_name -> types.Uint64Param
	7,  // 12: types.ValidatorParams.validator_double_sign_slash_percentage:type_name -> types.Uint64Param
	7,  // 13: types.ValidatorParams.validator_faulty_sign_slash_percentage:type_name -> types.Uint64Param
	7,  // 14: types.ValidatorParams.validator_bad_proposal_slash_percentage:type_name -> types.Uint64Param
	7,  // 15: types.ValidatorParams.validator_non_sign_slash_percentage:type_name -> types.Uint64Param
	7,  // 16: types.ValidatorParams.validator_max_non_sign:type_name -> types.Uint64Param
	7,  // 17: types.ValidatorParams.validator_non_sign_window:type_name -> types.Uint64Param
	6,  // 18: types.ValidatorParams.validator_double_sign_reporter_reward:type_name -> types.StringParam
	7,  // 19: types.ValidatorParams.validator_proposer_percentage_of_fees:type_name -> types.Uint64Param
	6,  // 20: types.ValidatorParams.validator_proposer_block_reward:type_name -> types.StringParam
	6,  // 21: types.FeeParams.message_send_fee:type_name -> types.StringParam
	6,  // 22: types.FeeParams.message_stake_fee:type_name -> types.StringParam
	6,  // 23: types.FeeParams.message_edit_stake_fee:type_name -> types.StringParam
	6,  // 24: types.FeeParams.message_unstake_fee:type_name -> types.StringParam
	6,  // 25: types.FeeParams.message_pause_fee:type_name -> types.StringParam
	6,  // 26: types.FeeParams.message_unpause_fee:type_name -> types.StringParam
	6,  // 27: types.FeeParams.message_change_parameter_fee:type_name -> types.StringParam
	6,  // 28: types.FeeParams.message_double_sign_fee:type_name -> types.StringParam
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_gov_proto_init() }
func file_gov_proto_init() {
	if File_gov_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gov_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gov_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gov_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gov_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gov_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gov_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GovernanceParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gov_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gov_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uint64Param); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gov_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gov_proto_goTypes,
		DependencyIndexes: file_gov_proto_depIdxs,
		MessageInfos:      file_gov_proto_msgTypes,
	}.Build()
	File_gov_proto = out.File
	file_gov_proto_rawDesc = nil
	file_gov_proto_goTypes = nil
	file_gov_proto_depIdxs = nil
}
